name: Deploying Springboot(War) to Tomcat on Azure Windows Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-springboot-app:
    name: Build Springboot Application
    runs-on: ubuntu-latest
    steps:
      - name: Install Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Verify Java Version
        run: java -version

      - name: Download the Code
        uses: actions/checkout@v3

      - name: Fix the Permissions of mvnw command
        run: chmod +x mvnw

      - name: Replace version name in pom.xml and Welcome.java
        run: |
              sed -i 's/REPLACETHISVALUEWITHGITHUBACTIONS/b${{github.run_number}}/g' pom.xml
              cd src/main/java/com/bbk/api/apiservice
              sed -i 's/REPLACETHISVALUEWITHGITHUBACTIONS/${{github.run_number}}/g' Welcome.java

      - name: Build the Code
        run: ./mvnw package

      - name: Verify the Build is Created or Not
        run: ls -l target/*.war
      
      - name: upload war file to artifact
        uses: actions/upload-artifact@v3
        with:
          name: warfile
          path: target/*.war

  deploy-to-server:
    name: Deploy application to server
    runs-on: ubuntu-latest
    needs: build-springboot-app
    steps:

      - name: Download warfile
        uses: actions/download-artifact@v3

      - name: Deploy the Build to Tomcat
        uses: mdallasanta/ssh-scp-deploy@v1.2.0
        with:
          local: warfile/*.war                                            
          remote: 'C:\Program Files\Apache Software Foundation\Tomcat 10.0\webapps\'                                               
          host: ${{secrets.HOST}}                                  
          port: ${{secrets.PORT}}
          user: ${{secrets.USER}}
          password: ${{secrets.PASSWORD}}
          pre_upload: echo "This will be executed before the upload!"
          post_upload: echo "executed after the upload!"
          ssh_options: -o StrictHostKeyChecking=no
          scp_options: -v
  verify-version:
    name: Check version by testing application endpoint
    runs-on: ubuntu-latest
    needs: deploy-to-server
    steps:
      - name: Send cURL request on port 8080
        id: response
        run: echo "::set-output name=id::$(curl http://40.76.230.55:8080/apiservice-b${{github.run_number}}/version)"
      
      - name: Check response
        if: ${{ steps.response.outputs.id == github.run_number }}
        run: |
              echo "Success!"
              echo ${{ steps.response.outputs.id }}


